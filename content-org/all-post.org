#+hugo_base_dir: ../

* 202307 部落格更新                                                    :misc:hexo:hugo:orgmode:
:PROPERTIES:
:EXPORT_FILE_NAME: blog-update-2023-07
:EXPORT_DATE: <2023-07-03 Mon>
:END:

近期以來有個目標是希望可以將事情盡量都在 emacs 中執行。將原來部落格寫作的方式搬進 org mode 可以說是其中一步。雖然按照現況使用 markdown 也沒什麼問題，不過也趁著這個機會來試看看 emacs 的 killer feature。

既然要改用 org mode 來管理部落格，就順勢把現在在用的 =hexo= 轉成可以支援 org 的 =hugo= ，過去雖然幾度想轉移。不過最後都因為懶惰而作罷。

雖然 hugo 已經原生支援 org， 不過在部落格系統部分，以 org mode 來說又分成兩派，一派是跟 markdown 一樣一篇一個檔案，另外一派則是使用一個 org 檔案來管理全部部落格的文章。這邊是想要嘗試看看用單檔管理全部文章的機制。不過在匯出的部分會需要另外處理。好在這邊有個套件 ox-hugo 可以來幫忙做這件事情。這也算是決定轉 hugo 的其中一個原因。

就這樣終於下定決心要花一點時間將部落格從 markdown 轉到 org 上。 然後把原本一直在用的 hexo 轉移到 hugo。接下來應該會慢慢將舊的文章轉移到 org 中。 搬進 org 之後希望是能降低寫部落格的阻力，幫助未來能有多一點的產出。

轉移到 hugo 的過程中也照著教學套了一下新的 github action，算是額外的收穫吧。不過比起讓 github action 跑，我個人是比較喜歡舊的透過 hexo deploy 直接從本機產生靜態文件並推到 github 上，單純許多。

- [[https://endlessparentheses.com/how-i-blog-one-year-of-posts-in-a-single-org-file.html][How I blog: One year of posts in a single org file]] 如果想知道單一檔案的好處這邊有提到一點
- [[https://ox-hugo.scripter.co/doc/why-ox-hugo/][Why ox-hugo?]] 使用 ox-hugo 的好處官網自己有解釋一番
  
* How to fix nix "Problem with the SSL CA cert" on macOS   :nix:emacs:eshell:
:PROPERTIES:
:EXPORT_FILE_NAME: how-to-fix-problem-with-the-ssl-ca-cert-on-macos
:EXPORT_DATE: <2023-05-26 07:59:06>
:END:

When using nix operations inside emacs sometime it will show this warning during install packages.

#+begin_src shell
warning: error: unable to download '{SOME_URL}': Problem with the SSL CA cert (path? access rights?) (77); using cached version
#+end_src

This warning occur because emacs gui on macOS use system defaut environment variable instead of shell environment variable. Most people on macOS use =exec-path-from-shell= to fix the path problem. Luckly =exec-path-from-shell= provide a variable call =exec-path-from-shell-variables= to import any other environment variables other than =PATH=.

So we can import =NIX_PROFILES= and =NIX_SSL_CERT_FILE= like below to solve the issue.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (dolist (var '("LC_CTYPE" "NIX_PROFILES" "NIX_SSL_CERT_FILE"))
    (add-to-list 'exec-path-from-shell-variables var))
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

* 修正 macos emacs term 顯示 unicode 錯誤問題      :terminal:emacs:nix:linux:
:PROPERTIES:
:EXPORT_FILE_NAME: fix-emacs-term-utf-rendering
:EXPORT_DATE: <2023-05-24 07:30:58>
:END:
最近遇到的一個奇怪的問題

在 emacs 中無論是透過 eshell 或 ansi-term 在呼叫 nix --help 時，都會有顯示 <C2><B7> (這是 unicode 的 middle dot) 的狀況。以為是 eshell 或 ansi-term 的問題，畢竟 emacs 對於 shell 或是 terminal emulator 的支援並不完美，一直以來都這樣認為。直到最近有點看不下去就想說來瞭解看看是哪裡有問題。

第一個直覺比較像是可能跟版本有關係，由於自己本身是使用 homebrew 安裝的 emacs-plus，就想說是不是裝其他編譯的版本看看是不是能解決。於是用 nix shell 安裝了 nix 上直接從 git head 編譯出來的版本。跑起來發現似乎沒有問題。於是很開心的想說試試看。結果從 emacs.app 中開啟就又有一樣的問題。

這樣一來就開始交叉測試，發現原來的 emacs-plus 只要從 terminal 中啟動就能正常顯示。而透過 emacs.app 開啟就會有顯示問題。這就怪了，不過 emacs.app 雖然對 macos 來說是應用程式，其實他只是個資料夾。下個測試就是從 terminal 中直接打開 emacs.app 中的 emacs，結果是沒有問題。 有這麼神奇從 terminal 中啟動沒問題但是從 emacs.app 中打開就有問題。於是開始交叉比較用 emacs.app 跟 emacs 啟動的設定有沒有不同。

在 emacs wiki 中有一小節 =Encoding for Terminal.app on OS X= 不過照著做並沒有解決問題。而 emacs 有提供 =describe-coding-system= ，兩邊都是 utf-8。

難道是 emacs.app 就沒辦法正確顯示 middle dot 嗎？於是直接從正常顯示的 emacs 直接複製字元然後貼到不正常顯示的 emacs.app 中，結果是 emacs.app 可以正常顯示 middle dot。不過這樣就更奇怪了。

查到最後偶然看到有人透過修改 =LC_ALL= 來修正顯示問題。於是就用 ~locale~ 來確認看看。果不其然兩邊的結果不太一樣。 terminal 中的 =LC_CTYPE= 是 =UTF-8= 而 emacs.app 中則是 =C= 。在 emacs.app 的 ansi-term 中執行 ~export LC_CTYPE="UTF-8"~ 修改變數後就正常了。

知道問題在哪裡之後就好處理了。
首先在 =.zshrc= 中加入
#+begin_src shell 
export CTYPE=en_US.UTF-8
#+end_src

接下來透過 =exec-path-from-shell= 把 =LC_CTYPE= 環境變數餵進去，package 本身有提供 ~exec-path-from-shell-variables~ 來匯入，這邊主要是要解決 eshell 的情況。 因為 eshell 不是 zsh，所以要另外處理。下面是一種範例。
#+begin_src emacs-lisp 
(use-package exec-path-from-shell
  :ensure t
  :config
  (dolist (var '("LC_CTYPE"))
    (add-to-list 'exec-path-from-shell-variables var))
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

看來是太久沒有用 linux 了，也許網路上資料很少是因為 LC 通常在 linux 都會設定。

至於 terminal.app 就算 =.zshrc= 沒有設定也吃得到的原因則是在 terminal.app 有個 =Set locale environment variables on startup= 是打勾的。



